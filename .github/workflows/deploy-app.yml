name: Deploy Helm Chart to EKS

on:
  workflow_run:
    workflows: ["Terraform Cluster Deploy"]
    types:
      - completed

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RELEASE_NAME: fiapx-application

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull latest commits from submodule remotes
      run: |
        git submodule foreach --recursive '
          branch=$(git rev-parse --abbrev-ref HEAD);
          git fetch origin $branch;
          git checkout origin/$branch;
        '

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name academy-eks-cluster

    - name: Install Helm
      uses: azure/setup-helm@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Delete all secrets
      run: |
        kubectl delete secrets --all

    - name: Create MySql secret
      run: |
        kubectl create secret generic mysql-secret \
        --from-literal=mysql-root-password=${{ secrets.TF_VAR_DB_PASSWORD }} \
        --from-literal=mysql-password=${{ secrets.TF_VAR_DB_PASSWORD }}

    - name: Download Output Artifact
      uses: actions/download-artifact@v4
      with:
        name: tf-output

    - name: Create Aws secret
      run: |
        value=$(jq -r '.sqs_queue_url.value' tf-output.json)
        echo $value
        kubectl create secret generic aws-secret \
        --from-literal=access-key=${{ secrets.AWS_ACCESS_KEY_ID }} \
        --from-literal=secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
        --from-literal=session-token=${{ secrets.AWS_SESSION_TOKEN }} \
        --from-literal=aws-sqs-endpoint=$value

    - name: Uninstall If Exists
      run: |
        helm list -n default -q | xargs -r -n1 helm uninstall -n default

    - name: Update Helm dependency
      run: |
        helm dependency update

    - name: Deploy Helm chart
      run: |
        helm upgrade --install -f values_aws.yaml $RELEASE_NAME ./ --namespace default --create-namespace

    - name: Sleep for 10 min
      run: sleep 600

